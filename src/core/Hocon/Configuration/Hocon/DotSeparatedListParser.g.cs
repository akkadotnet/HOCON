
/* #line 1 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */

/* #line 27 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */

 
/*
 
THIS FILE WAS AUTOGENERATED BY Ragel (http://www.complang.org/ragel/).
See lang description in: DotSeparatedListParser.rl file
 
Description: parse '.' separated string into list of string.
 
HOWTO Regenerate: Ragel -A -L DotSeparatedListParser.rl -o DotSeparatedListParser.g.cs
*/
namespace Akka.Configuration.Hocon
{
    using System.Collections.Generic;
 
    internal class DotSeparatedListParser
    {
        #region data
        
/* #line 25 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.g.cs" */
static readonly sbyte[] _DotSeparatedListParser_actions =  new sbyte [] {
	0, 1, 0, 1, 1, 1, 2, 1, 
	6, 1, 7, 1, 8, 1, 9, 1, 
	10, 1, 11, 2, 2, 3, 2, 2, 
	4, 2, 2, 5
};

static readonly sbyte[] _DotSeparatedListParser_key_offsets =  new sbyte [] {
	0, 1, 2, 5, 6, 8
};

static readonly char[] _DotSeparatedListParser_trans_keys =  new char [] {
	'\u0022', '\u0027', '\u0022', '\u0027', '\u002e', '\u002e', '\u0022', '\u002e', 
	'\u0027', '\u002e', (char) 0
};

static readonly sbyte[] _DotSeparatedListParser_single_lengths =  new sbyte [] {
	1, 1, 3, 1, 2, 2
};

static readonly sbyte[] _DotSeparatedListParser_range_lengths =  new sbyte [] {
	0, 0, 0, 0, 0, 0
};

static readonly sbyte[] _DotSeparatedListParser_index_offsets =  new sbyte [] {
	0, 2, 4, 8, 10, 13
};

static readonly sbyte[] _DotSeparatedListParser_trans_targs =  new sbyte [] {
	2, 0, 2, 1, 4, 5, 2, 3, 
	2, 3, 3, 0, 4, 3, 1, 5, 
	2, 2, 2, 2, 2, 0
};

static readonly sbyte[] _DotSeparatedListParser_trans_actions =  new sbyte [] {
	9, 0, 7, 0, 5, 5, 11, 25, 
	17, 25, 22, 0, 5, 19, 0, 5, 
	15, 15, 17, 13, 13, 0
};

static readonly sbyte[] _DotSeparatedListParser_to_state_actions =  new sbyte [] {
	0, 0, 1, 0, 0, 0
};

static readonly sbyte[] _DotSeparatedListParser_from_state_actions =  new sbyte [] {
	0, 0, 3, 0, 0, 0
};

static readonly sbyte[] _DotSeparatedListParser_eof_trans =  new sbyte [] {
	18, 18, 0, 19, 21, 21
};

const int DotSeparatedListParser_start = 2;
const int DotSeparatedListParser_first_final = 2;
const int DotSeparatedListParser_error = -1;

const int DotSeparatedListParser_en_main = 2;


/* #line 46 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */
        #endregion
 
        public static List<string> Parse(string data)
        {
            var retVal = new List<string>();
            int cs;
            int ts;
            int te;
            int act;
            
            int p = 0;
            int pe = data.Length;
            int eof = data.Length;
            
            #region init
            
/* #line 102 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.g.cs" */
	{
	cs = DotSeparatedListParser_start;
	ts = -1;
	te = -1;
	act = 0;
	}

/* #line 62 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */
            #endregion
 
            #region exec
            
/* #line 115 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.g.cs" */
	{
	sbyte _klen;
	sbyte _trans;
	int _acts;
	int _nacts;
	sbyte _keys;

	if ( p == pe )
		goto _test_eof;
_resume:
	_acts = _DotSeparatedListParser_from_state_actions[cs];
	_nacts = _DotSeparatedListParser_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _DotSeparatedListParser_actions[_acts++] ) {
	case 1:
/* #line 1 "NONE" */
	{ts = p;}
	break;
/* #line 134 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.g.cs" */
		default: break;
		}
	}

	_keys = _DotSeparatedListParser_key_offsets[cs];
	_trans = (sbyte)_DotSeparatedListParser_index_offsets[cs];

	_klen = _DotSeparatedListParser_single_lengths[cs];
	if ( _klen > 0 ) {
		sbyte _lower = _keys;
		sbyte _mid;
		sbyte _upper = (sbyte) (_keys + _klen - 1);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (sbyte) (_lower + ((_upper-_lower) >> 1));
			if ( data[p] < _DotSeparatedListParser_trans_keys[_mid] )
				_upper = (sbyte) (_mid - 1);
			else if ( data[p] > _DotSeparatedListParser_trans_keys[_mid] )
				_lower = (sbyte) (_mid + 1);
			else {
				_trans += (sbyte) (_mid - _keys);
				goto _match;
			}
		}
		_keys += (sbyte) _klen;
		_trans += (sbyte) _klen;
	}

	_klen = _DotSeparatedListParser_range_lengths[cs];
	if ( _klen > 0 ) {
		sbyte _lower = _keys;
		sbyte _mid;
		sbyte _upper = (sbyte) (_keys + (_klen<<1) - 2);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (sbyte) (_lower + (((_upper-_lower) >> 1) & ~1));
			if ( data[p] < _DotSeparatedListParser_trans_keys[_mid] )
				_upper = (sbyte) (_mid - 2);
			else if ( data[p] > _DotSeparatedListParser_trans_keys[_mid+1] )
				_lower = (sbyte) (_mid + 2);
			else {
				_trans += (sbyte)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += (sbyte) _klen;
	}

_match:
_eof_trans:
	cs = _DotSeparatedListParser_trans_targs[_trans];

	if ( _DotSeparatedListParser_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _DotSeparatedListParser_trans_actions[_trans];
	_nacts = _DotSeparatedListParser_actions[_acts++];
	while ( _nacts-- > 0 )
	{
		switch ( _DotSeparatedListParser_actions[_acts++] )
		{
	case 2:
/* #line 1 "NONE" */
	{te = p+1;}
	break;
	case 3:
/* #line 9 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */
	{act = 1;}
	break;
	case 4:
/* #line 9 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */
	{act = 2;}
	break;
	case 5:
/* #line 4 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */
	{act = 3;}
	break;
	case 6:
/* #line 9 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */
	{te = p+1;{
    var parsedItem = data.Substring(ts+1,te-ts-2);
    retVal.Add(parsedItem);
  }}
	break;
	case 7:
/* #line 9 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */
	{te = p+1;{
    var parsedItem = data.Substring(ts+1,te-ts-2);
    retVal.Add(parsedItem);
  }}
	break;
	case 8:
/* #line 25 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */
	{te = p+1;}
	break;
	case 9:
/* #line 4 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */
	{te = p;p--;{
    var parsedItem = data.Substring(ts,te-ts);
    retVal.Add(parsedItem);
  }}
	break;
	case 10:
/* #line 4 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */
	{{p = ((te))-1;}{
    var parsedItem = data.Substring(ts,te-ts);
    retVal.Add(parsedItem);
  }}
	break;
	case 11:
/* #line 1 "NONE" */
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;}
    var parsedItem = data.Substring(ts+1,te-ts-2);
    retVal.Add(parsedItem);
  }
	break;
	case 2:
	{{p = ((te))-1;}
    var parsedItem = data.Substring(ts+1,te-ts-2);
    retVal.Add(parsedItem);
  }
	break;
	case 3:
	{{p = ((te))-1;}
    var parsedItem = data.Substring(ts,te-ts);
    retVal.Add(parsedItem);
  }
	break;
	}
	}
	break;
/* #line 272 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.g.cs" */
		default: break;
		}
	}

_again:
	_acts = _DotSeparatedListParser_to_state_actions[cs];
	_nacts = _DotSeparatedListParser_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _DotSeparatedListParser_actions[_acts++] ) {
	case 0:
/* #line 1 "NONE" */
	{ts = -1;}
	break;
/* #line 286 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.g.cs" */
		default: break;
		}
	}

	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _DotSeparatedListParser_eof_trans[cs] > 0 ) {
		_trans = (sbyte) (_DotSeparatedListParser_eof_trans[cs] - 1);
		goto _eof_trans;
	}
	}

	}

/* #line 66 "C:\\dafanasyev\\HOCON\\src\\core\\Hocon\\Configuration\\Hocon\\\\DotSeparatedListParser.rl" */
            #endregion
            
            return retVal;
        }
    }
}